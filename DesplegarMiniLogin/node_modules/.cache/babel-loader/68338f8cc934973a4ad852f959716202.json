{"remainingRequest":"C:\\Users\\NeoKhazar\\source\\repos\\ProyectoFinal2\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\NeoKhazar\\source\\repos\\ProyectoFinal2\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!C:\\Users\\NeoKhazar\\source\\repos\\ProyectoFinal2\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!C:\\Users\\NeoKhazar\\source\\repos\\ProyectoFinal2\\src\\components\\MonsterSlayer\\components\\TheMonsterSlayer.vue?vue&type=script&lang=js&","dependencies":[{"path":"C:\\Users\\NeoKhazar\\source\\repos\\ProyectoFinal2\\src\\components\\MonsterSlayer\\components\\TheMonsterSlayer.vue","mtime":1588932430584},{"path":"C:\\Users\\NeoKhazar\\source\\repos\\ProyectoFinal2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\NeoKhazar\\source\\repos\\ProyectoFinal2\\node_modules\\babel-loader\\lib\\index.js","mtime":499162500000},{"path":"C:\\Users\\NeoKhazar\\source\\repos\\ProyectoFinal2\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"C:\\Users\\NeoKhazar\\source\\repos\\ProyectoFinal2\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: 'app',\n  data: function data() {\n    return {\n      playerHealth: 100,\n      monsterHealth: 100,\n      gameIsRunning: false,\n      turns: []\n    };\n  },\n  methods: {\n    startGame: function startGame() {\n      this.gameIsRunning = true;\n      this.playerHealth = 100;\n      this.monsterHealth = 100;\n      this.turns = [];\n    },\n    attack: function attack() {\n      var damage = this.calculatedDamage(3, 10);\n      this.turns.unshift({\n        isPlayer: true,\n        text: 'Player hits monster for ' + damage\n      });\n      this.monsterHealth -= damage;\n\n      if (this.checkWin()) {\n        return;\n      }\n\n      this.monsterAttacks();\n    },\n    specialAttack: function specialAttack() {\n      var damage = this.calculatedDamage(10, 20);\n      this.turns.unshift({\n        isPlayer: true,\n        text: 'Player hits Monster hard for ' + damage\n      });\n      this.monsterHealth -= damage;\n\n      if (this.checkWin()) {\n        return;\n      }\n\n      this.monsterAttacks();\n    },\n    heal: function heal() {\n      if (this.playerHealth <= 90) {\n        this.playerHealth += 10;\n      } else {\n        this.playerHealth = 100;\n      }\n\n      this.turns.unshift({\n        isPlayer: true,\n        text: 'Player heals for 10'\n      });\n      this.monsterAttacks();\n    },\n    giveUp: function giveUp() {\n      this.gameIsRunning = false;\n    },\n    monsterAttacks: function monsterAttacks() {\n      var damage = this.calculatedDamage(5, 12);\n      this.playerHealth -= damage;\n      this.checkWin();\n      this.turns.unshift({\n        isPlayer: false,\n        text: 'Monster hits Player for ' + damage\n      });\n    },\n    calculatedDamage: function calculatedDamage(min, max) {\n      return Math.max(Math.floor(Math.random() * max) + 1, min);\n    },\n    checkWin: function checkWin() {\n      if (this.monsterHealth <= 0) {\n        if (confirm('You won!, New Game?')) {\n          this.startGame();\n        } else {\n          this.gameIsRunning = false;\n        }\n\n        return true;\n      } else if (this.playerHealth <= 0) {\n        if (confirm('You lost!, New Game?')) {\n          this.startGame();\n        } else {\n          this.gameIsRunning = false;\n        }\n\n        return true;\n      }\n    }\n  }\n};",{"version":3,"sources":["TheMonsterSlayer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiDA,eAAA;AACA,QAAA,KADA;AAEA,MAFA,kBAEA;AACA,WAAA;AACA,oBAAA,GADA;AAEA,qBAAA,GAFA;AAGA,qBAAA,KAHA;AAIA,aAAA;AAJA,KAAA;AAMA,GATA;AAUA,WAAA;AACA,aADA,uBACA;AACA,WAAA,aAAA,GAAA,IAAA;AACA,WAAA,YAAA,GAAA,GAAA;AACA,WAAA,aAAA,GAAA,GAAA;AACA,WAAA,KAAA,GAAA,EAAA;AACA,KANA;AAOA,UAPA,oBAOA;AACA,UAAA,SAAA,KAAA,gBAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA,WAAA,KAAA,CAAA,OAAA,CAAA;AACA,kBAAA,IADA;AAEA,cAAA,6BAAA;AAFA,OAAA;AAIA,WAAA,aAAA,IAAA,MAAA;;AACA,UAAA,KAAA,QAAA,EAAA,EAAA;AACA;AACA;;AACA,WAAA,cAAA;AACA,KAlBA;AAmBA,iBAnBA,2BAmBA;AACA,UAAA,SAAA,KAAA,gBAAA,CAAA,EAAA,EAAA,EAAA,CAAA;AACA,WAAA,KAAA,CAAA,OAAA,CAAA;AACA,kBAAA,IADA;AAEA,cAAA,kCAAA;AAFA,OAAA;AAIA,WAAA,aAAA,IAAA,MAAA;;AACA,UAAA,KAAA,QAAA,EAAA,EAAA;AACA;AACA;;AACA,WAAA,cAAA;AACA,KA9BA;AA+BA,QA/BA,kBA+BA;AACA,UAAA,KAAA,YAAA,IAAA,EAAA,EAAA;AACA,aAAA,YAAA,IAAA,EAAA;AACA,OAFA,MAEA;AACA,aAAA,YAAA,GAAA,GAAA;AACA;;AACA,WAAA,KAAA,CAAA,OAAA,CAAA;AACA,kBAAA,IADA;AAEA,cAAA;AAFA,OAAA;AAIA,WAAA,cAAA;AACA,KA1CA;AA2CA,UA3CA,oBA2CA;AACA,WAAA,aAAA,GAAA,KAAA;AACA,KA7CA;AA8CA,kBA9CA,4BA8CA;AACA,UAAA,SAAA,KAAA,gBAAA,CAAA,CAAA,EAAA,EAAA,CAAA;AACA,WAAA,YAAA,IAAA,MAAA;AACA,WAAA,QAAA;AACA,WAAA,KAAA,CAAA,OAAA,CAAA;AACA,kBAAA,KADA;AAEA,cAAA,6BAAA;AAFA,OAAA;AAIA,KAtDA;AAuDA,oBAvDA,4BAuDA,GAvDA,EAuDA,GAvDA,EAuDA;AACA,aAAA,KAAA,GAAA,CAAA,KAAA,KAAA,CAAA,KAAA,MAAA,KAAA,GAAA,IAAA,CAAA,EAAA,GAAA,CAAA;AACA,KAzDA;AA0DA,YA1DA,sBA0DA;AACA,UAAA,KAAA,aAAA,IAAA,CAAA,EAAA;AACA,YAAA,QAAA,qBAAA,CAAA,EAAA;AACA,eAAA,SAAA;AACA,SAFA,MAEA;AACA,eAAA,aAAA,GAAA,KAAA;AACA;;AACA,eAAA,IAAA;AACA,OAPA,MAOA,IAAA,KAAA,YAAA,IAAA,CAAA,EAAA;AACA,YAAA,QAAA,sBAAA,CAAA,EAAA;AACA,eAAA,SAAA;AACA,SAFA,MAEA;AACA,eAAA,aAAA,GAAA,KAAA;AACA;;AACA,eAAA,IAAA;AACA;AACA;AA1EA;AAVA,CAAA","sourcesContent":["<template>\r\n    <div id=\"app\">\r\n        <section id=\"row\">\r\n            <div class=\"small-6 columns\">\r\n                <h1 class=\"text-center\">YOU</h1>\r\n                <div class=\"healthbar\">\r\n                    <div class=\"healthbar text-center\"\r\n                         style=\"background-color: green; margin: 0; color: white;\"\r\n                         :style=\"{width: playerHealth + '%'}\">\r\n                        {{ playerHealth }}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div class=\"small-6 columns\">\r\n                <h1 class=\"text-center\">MONSTER</h1>\r\n                <div class=\"healthbar\">\r\n                    <div class=\"healthbar text-center\"\r\n                         style=\"background-color: green; margin: 0; color: white;\"\r\n                         :style=\"{width: monsterHealth + '%'}\">\r\n                        {{ monsterHealth }}\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </section>\r\n        <section class=\"controls\" v-if=\"!gameIsRunning\">\r\n            <div class=\"small-12 columns\">\r\n                <button id=\"start-game\" @click=\"startGame\">START NEW GAME</button>\r\n            </div>\r\n        </section>\r\n        <section class=\"controls\" v-else>\r\n            <div class=\"small-12 columns\">\r\n                <button id=\"attack\" @click=\"attack\">ATTACK</button>\r\n                <button id=\"special-attack\" @click=\"specialAttack\">SPECIAL ATTACK</button>\r\n                <button id=\"heal\" @click=\"heal\">HEAL</button>\r\n                <button id=\"give-up\" @click=\"giveUp\">GIVE UP</button>\r\n            </div>\r\n        </section>\r\n        <section class=\"log\" v-if=\"turns.length > 0\">\r\n            <div class=\"small-12 columns\">\r\n                <ul>\r\n                    <li v-for=\"turn in turns\" :class=\"{'player-turn': turn.isPlayer, 'monster-turn': !turn.isPlayer}\">\r\n                        {{ turn.text }}\r\n                    </li>\r\n                </ul>\r\n            </div>\r\n        </section>\r\n    </div>\r\n</template>\r\n<script>\r\n    export default {\r\n        name: 'app',\r\n        data() {\r\n            return {\r\n                playerHealth: 100,\r\n                monsterHealth: 100,\r\n                gameIsRunning: false,\r\n                turns: []\r\n            }\r\n        },\r\n        methods: {\r\n            startGame() {\r\n                this.gameIsRunning = true;\r\n                this.playerHealth = 100;\r\n                this.monsterHealth = 100;\r\n                this.turns = [];\r\n            },\r\n            attack() {\r\n                var damage = this.calculatedDamage(3, 10);\r\n                this.turns.unshift({\r\n                    isPlayer: true,\r\n                    text: 'Player hits monster for ' + damage\r\n                });\r\n                this.monsterHealth -= damage;\r\n                if (this.checkWin()) {\r\n                    return;\r\n                }\r\n                this.monsterAttacks();\r\n            },\r\n            specialAttack() {\r\n                var damage = this.calculatedDamage(10, 20);\r\n                this.turns.unshift({\r\n                    isPlayer: true,\r\n                    text: 'Player hits Monster hard for ' + damage\r\n                });\r\n                this.monsterHealth -= damage;\r\n                if (this.checkWin()) {\r\n                    return;\r\n                }\r\n                this.monsterAttacks();\r\n            },\r\n            heal() {\r\n                if (this.playerHealth <= 90) {\r\n                    this.playerHealth += 10;\r\n                } else {\r\n                    this.playerHealth = 100;\r\n                }\r\n                this.turns.unshift({\r\n                    isPlayer: true,\r\n                    text: 'Player heals for 10'\r\n                });\r\n                this.monsterAttacks();\r\n            },\r\n            giveUp() {\r\n                this.gameIsRunning = false;\r\n            },\r\n            monsterAttacks() {\r\n                var damage = this.calculatedDamage(5, 12);\r\n                this.playerHealth -= damage;\r\n                this.checkWin();\r\n                this.turns.unshift({\r\n                    isPlayer: false,\r\n                    text: 'Monster hits Player for ' + damage\r\n                });\r\n            },\r\n            calculatedDamage(min, max) {\r\n                return Math.max(Math.floor(Math.random() * max) + 1, min);\r\n            },\r\n            checkWin() {\r\n                if (this.monsterHealth <= 0) {\r\n                    if (confirm('You won!, New Game?')) {\r\n                        this.startGame();\r\n                    } else {\r\n                        this.gameIsRunning = false;\r\n                    }\r\n                    return true;\r\n                } else if (this.playerHealth <= 0) {\r\n                    if (confirm('You lost!, New Game?')) {\r\n                        this.startGame();\r\n                    } else {\r\n                        this.gameIsRunning = false;\r\n                    }\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n    }\r\n</script>\r\n<style>\r\n    .text-center {\r\n        text-align: center;\r\n    }\r\n\r\n    .healthbar {\r\n        width: 80%;\r\n        height: 40px;\r\n        background-color: #eee;\r\n        margin: auto;\r\n        transition: width 500ms;\r\n    }\r\n\r\n    .controls, .log {\r\n        margin-top: 30px;\r\n        text-align: center;\r\n        padding: 10px;\r\n        border: 1px solid #ccc;\r\n        box-shadow: 0px 3px 6px #ccc;\r\n    }\r\n\r\n    .turn {\r\n        margin-top: 20px;\r\n        margin-bottom: 20px;\r\n        font-weight: bold;\r\n        font-size: 22px;\r\n    }\r\n\r\n    .log ul {\r\n        list-style: none;\r\n        font-weight: bold;\r\n        text-transform: uppercase;\r\n    }\r\n\r\n        .log ul li {\r\n            margin: 5px;\r\n        }\r\n\r\n        .log ul .player-turn {\r\n            color: blue;\r\n            background-color: #e4e8ff;\r\n        }\r\n\r\n        .log ul .monster-turn {\r\n            color: red;\r\n            background-color: #ffc0c1;\r\n        }\r\n\r\n    button {\r\n        font-size: 20px;\r\n        background-color: #eee;\r\n        padding: 12px;\r\n        box-shadow: 0 1px 1px black;\r\n        margin: 10px;\r\n    }\r\n\r\n    #start-game {\r\n        background-color: #aaffb0;\r\n    }\r\n\r\n        #start-game:hover {\r\n            background-color: #76ff7e;\r\n        }\r\n\r\n    #attack {\r\n        background-color: #ff7367;\r\n    }\r\n\r\n        #attack:hover {\r\n            background-color: #ff3f43;\r\n        }\r\n\r\n    #special-attack {\r\n        background-color: #ffaf4f;\r\n    }\r\n\r\n        #special-attack:hover {\r\n            background-color: #ff9a2b;\r\n        }\r\n\r\n    #heal {\r\n        background-color: #aaffb0;\r\n    }\r\n\r\n        #heal:hover {\r\n            background-color: #76ff7e;\r\n        }\r\n\r\n    #give-up {\r\n        background-color: #ffffff;\r\n    }\r\n\r\n        #give-up:hover {\r\n            background-color: #c7c7c7;\r\n        }\r\n</style>"],"sourceRoot":"src/components/MonsterSlayer/components"}]}